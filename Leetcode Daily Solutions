Length of last word :- 

class Solution {
public:
    int lengthOfLastWord(string s) { 
        int len = 0, tail=s.length()-1;
        while(tail>=0 && s[tail] == ' ') tail--;
        while(tail>=0 && s[tail] != ' ')
        {
            len++;
            tail--;
        }
        return len;
    }
};

Excel sheet column number :-

class Solution {
public:
    int titleToNumber(string columnTitle) {
        int res = 0 ;
        for( char c: columnTitle)
        {
            int d = c - 'A' + 1;
            res = res * 26 + d;
        }
        return res;
    }
};

Add Binary :-

class Solution {
public:
    string addBinary(string a, string b) {
        int i=a.length()-1;
    int j=b.length()-1;
    string s="";
    int c=0;
    while(i>=0 || j>=0 || c==1)
    {
        c += i >= 0 ? a[i --] - '0' : 0;
            c += j >= 0 ? b[j --] - '0' : 0;
            s = char(c % 2 + '0') + s;
            c /= 2;
    }
    return s;
    }
};

Valid Anagram :-

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length()) return false;
        unordered_map<char , int> map;
        for(int i=0;i<s.length();i++)
        {
            map[s[i]]++;
            map[t[i]]--;
        }
        
        for(auto count:map)
            if(count.second)
                return false;
        return true;
    }
};

Nth Highest Salary :- 

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET N=N-1;
  RETURN (
      # Write your MySQL query statement below.
      select ifnull((select distinct Salary from Employee order by Salary desc limit N,1),null)
      
  );
END


Delete duplicate element :-

Delete p1 FROM Person p1,
Person p2
Where p1.Email=p2.Email AND p1.Id > p2.Id;

Big Countries :-

Select name , population , area 
From World
Where area >= 3000000 
Union  
Select name , population , area 
From World
Where population >=25000000;

Find Customer without referee :-

Select name
From Customer
Where referee_id <> 2 or Referee_id="null";


Ugly Number:-

class Solution {
public:
    bool isUgly(int n) {
        
        if(n==0){
            return false;
        }
        if(n==1){
            return true;
        }
        if(n%2==0){
            return isUgly(n/2);
        }
        if(n%3==0){
            return isUgly(n/3);
        }
        if(n%5==0){
            return isUgly(n/5);
        }
        return false;
        
    }
};

Missing Number :-

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int sum1=n*(n+1)/2;
        int sum2=0;
        for(int i=0;i<n;i++)
        {
            sum2=sum2+nums[i];
        }
        
        return sum1-sum2;
    }
};

Whether Multiple Of 3:-

Class Solution
{
Public:
bool ismutipleof(int n)
{
if(n<=0) return 0;
if(n==1) return 1;
while(n%3==0)
return n==1;
}
};


Check if sentence is pangram:-

class Solution {
public:
    bool checkIfPangram(string sentence) {
        unordered_set<char> m(sentence.begin(),sentence.end());
        return m.size()==26;
        
    }
};

_______________________________________________________________________________________________________________________________________________________________________
Find pivot index
Find sum of array member
_______________________________________________________________________________________________________________________________________________________________________

isomorphic String:-

class Solution {
    public boolean isIsomorphic(String s, String t) {
        
        int[] mappingDictStoT = new int[256];
        Arrays.fill(mappingDictStoT, -1);
        
        int[] mappingDictTtoS = new int[256];
        Arrays.fill(mappingDictTtoS, -1);
        
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            
            // Case 1: No mapping exists in either of the dictionaries
            if (mappingDictStoT[c1] == -1 && mappingDictTtoS[c2] == -1) {
                mappingDictStoT[c1] = c2;
                mappingDictTtoS[c2] = c1;
            }
            
            // Case 2: Ether mapping doesn't exist in one of the dictionaries or Mapping exists and
            // it doesn't match in either of the dictionaries or both 
            else if (!(mappingDictStoT[c1] == c2 && mappingDictTtoS[c2] == c1)) {
                return false;
            }
        }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Is Subsequence :-
class Solution {
    public boolean isSubsequence(String s, String t) {
        
        if(s.length()==0) return true;

        char ss [] = s.toCharArray();
        char tt [] = t.toCharArray();

        int t_pointer = 0;
        int s_pointer = 0;

        while(t_pointer < t.length())
        {
             if(tt[t_pointer] == ss[s_pointer])
             {
                 s_pointer++;

                 if(s_pointer == s.length()) return true;
             }
             t_pointer++;
        }

        return false;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Merge two sorted List:-
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyhead = new ListNode();
        ListNode tail = dummyhead;
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                tail.next=list1;
                list1=list1.next;
                tail=tail.next;

            } 
            else
            {
                tail.next=list2;
                list2=list2.next;
                tail=tail.next;
            }       
        }
        tail.next=(list1!=null)?list1:list2;

        return dummyhead.next;
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse Linked List:-
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while(current != null)
        {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Middle of linked list:-

class Solution {
    public ListNode middleNode(ListNode head) {
    ListNode slow = head;
    ListNode fast = head;

    while(fast!= null && fast.next!= null)
    {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow ;
}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Linked list cycle II :-

ListNode slow = head;
    ListNode fast = head;
    
    // Finding the meeting point of the slow and fast pointers
    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) {
            break;
        }
    }
    
    // If there's no cycle, return null
    if (fast == null || fast.next == null) {
        return null;
    }
    
    // Resetting the slow pointer to the head of the linked list
    slow = head;
    
    // Moving both pointers at the same speed until they meet again
    while (slow != fast) {
        slow = slow.next;
        fast = fast.next;
    }
    
    // Returning the start node of the cycle
    return slow;
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
Best time to buy and sell stocks:-

class Solution {
    public int maxProfit(int[] prices) {
        
        int min = Integer.MAX_VALUE;
        int profit=0;
        int overall_profit=0;
        for(int i=0;i<prices.length;i++)
        {
            if(min>prices[i])
            {
                min=prices[i];
            }

            profit=prices[i]-min;

            if(overall_profit<profit)
            {
                overall_profit=profit;
            }
        }
        return overall_profit;
    }
    }
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
Valid Parenthesis :-

class Solution {
    public boolean isValid(String s) {
       
        Stack<Character> stk = new Stack<Character>();
        for(char c : s.toCharArray())
        {
            if(c == '(' || c == '[' || c == '{')
        {
            stk.push(c);
        }
        else
        {
            if(stk.isEmpty())
            {
                return false;
            }

            char top = stk.peek();
            if((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{'))
            {
                stk.pop();
            }
            else
            {
                return false;
            }
        }
        }

        return stk.isEmpty();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
search in rotated array :-
class Solution {
    public int search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        int mid = (start + end) / 2;
        while (start <= end) {
            mid = (start + end) / 2;
            if (target == nums[mid]) {
                return mid;
            }
            if (nums[start] <= nums[mid]) {
                if (nums[start] <= target && nums[mid] >= target) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (nums[end] >= target && nums[mid] <= target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
valid suduko :-

public boolean isValidSudoku(char[][] board) {
    Set seen = new HashSet();
    for (int i=0; i<9; ++i) {
        for (int j=0; j<9; ++j) {
            char number = board[i][j];
            if (number != '.')
                if (!seen.add(number + " in row " + i) ||
                    !seen.add(number + " in column " + j) ||
                    !seen.add(number + " in block " + i/3 + "-" + j/3))
                    return false;
        }
    }
    return true;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Sudoku Solver :-

class Solution {
    public void solveSudoku(char[][] board) {
        // Start solving sudoku from the first cell
        solve(board, 0, 0);
    }

    private boolean solve(char[][] board, int row, int col) {
        // Base case: If row is equal to board length, entire board has been filled
        if (row == board.length) {
            return true;
        }
        
        // Move to next row when current row is fully filled
        if (col == board[0].length) {
            return solve(board, row + 1, 0);
        }
        
        // Skip cells that are already filled
        if (board[row][col] != '.') {
            return solve(board, row, col + 1);
        }
        
        // Try different numbers in current cell
        for (char num = '1'; num <= '9'; num++) {
            if (isValidPlacement(board, row, col, num)) {
                board[row][col] = num; // Fill current cell with valid number
                
                // Move to next cell
                if (solve(board, row, col + 1)) {
                    return true;
                }
                
                // Backtrack to previous state if solution not found
                board[row][col] = '.';
            }
        }
        
        // No valid solution found
        return false;
    }

    private boolean isValidPlacement(char[][] board, int row, int col, char num) {
        // Check if num is already in the same row, column or 3x3 subgrid
        for (int i = 0; i < board.length; i++) {
            // Check row
            if (board[i][col] == num) {
                return false;
            }

            // Check column
            if (board[row][i] == num) {
                return false;
            }
 
            // Check 3x3 subgrid
            int subgridRow = 3 * (row / 3) + i / 3; // Calculate row index of subgrid
            int subgridCol = 3 * (col / 3) + i % 3; // Calculate column index of subgrid
 
            if (board[subgridRow][subgridCol] == num) {
                return false;
            }
        }

        // Placement is valid
        return true;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Combination Sum :-

Class Solution{
public List<List<Integer>> combinationSum(int[] candidates, int target)
{
   List<List<Integer>> finalList<>();
   helper(0, candidates , target , new ArrayList<> () , finalList);
   return FinalList;
   
 }
public void helper(int index , int [] arr , int target , ArrayList <Integer> list , List<List<Integer>> finalList)
{
   if(index == arr.length)
   {
     if(target == 0)
     {
         finalList.add(new ArrayList <> (list));
     }
     return ;
   }
   
   if(target >= arr[index])
   {
     list.add(arr[index]);
     helper(index , arr , target - arr[index] , list , finalList);
     list.remove(list.size()-1);
   }
   
   helper(index+1 , arr, target , list , finalList);
     
  }
  
  --------------------------------------------------------------------------------------------------------------------------------------------------------------
