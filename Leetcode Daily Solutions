Length of last word :- 

class Solution {
public:
    int lengthOfLastWord(string s) { 
        int len = 0, tail=s.length()-1;
        while(tail>=0 && s[tail] == ' ') tail--;
        while(tail>=0 && s[tail] != ' ')
        {
            len++;
            tail--;
        }
        return len;
    }
};

Excel sheet column number :-

class Solution {
public:
    int titleToNumber(string columnTitle) {
        int res = 0 ;
        for( char c: columnTitle)
        {
            int d = c - 'A' + 1;
            res = res * 26 + d;
        }
        return res;
    }
};

Add Binary :-

class Solution {
public:
    string addBinary(string a, string b) {
        int i=a.length()-1;
    int j=b.length()-1;
    string s="";
    int c=0;
    while(i>=0 || j>=0 || c==1)
    {
        c += i >= 0 ? a[i --] - '0' : 0;
            c += j >= 0 ? b[j --] - '0' : 0;
            s = char(c % 2 + '0') + s;
            c /= 2;
    }
    return s;
    }
};

Valid Anagram :-

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length()) return false;
        unordered_map<char , int> map;
        for(int i=0;i<s.length();i++)
        {
            map[s[i]]++;
            map[t[i]]--;
        }
        
        for(auto count:map)
            if(count.second)
                return false;
        return true;
    }
};

Nth Highest Salary :- 

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET N=N-1;
  RETURN (
      # Write your MySQL query statement below.
      select ifnull((select distinct Salary from Employee order by Salary desc limit N,1),null)
      
  );
END


Delete duplicate element :-

Delete p1 FROM Person p1,
Person p2
Where p1.Email=p2.Email AND p1.Id > p2.Id;

Big Countries :-

Select name , population , area 
From World
Where area >= 3000000 
Union  
Select name , population , area 
From World
Where population >=25000000;

Find Customer without referee :-

Select name
From Customer
Where referee_id <> 2 or Referee_id="null";


Ugly Number:-

class Solution {
public:
    bool isUgly(int n) {
        
        if(n==0){
            return false;
        }
        if(n==1){
            return true;
        }
        if(n%2==0){
            return isUgly(n/2);
        }
        if(n%3==0){
            return isUgly(n/3);
        }
        if(n%5==0){
            return isUgly(n/5);
        }
        return false;
        
    }
};

Missing Number :-

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int sum1=n*(n+1)/2;
        int sum2=0;
        for(int i=0;i<n;i++)
        {
            sum2=sum2+nums[i];
        }
        
        return sum1-sum2;
    }
};

Whether Multiple Of 3:-

Class Solution
{
Public:
bool ismutipleof(int n)
{
if(n<=0) return 0;
if(n==1) return 1;
while(n%3==0)
return n==1;
}
};


Check if sentence is pangram:-

class Solution {
public:
    bool checkIfPangram(string sentence) {
        unordered_set<char> m(sentence.begin(),sentence.end());
        return m.size()==26;
        
    }
};

_______________________________________________________________________________________________________________________________________________________________________
Find pivot index
Find sum of array member
_______________________________________________________________________________________________________________________________________________________________________
